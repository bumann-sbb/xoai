/*
 * The contents of this file are subject to the license and copyright
 * detailed in the LICENSE and NOTICE files at the root of the source
 * tree and available online at
 *
 * http://www.dspace.org/license/
 */

//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference
// Implementation, vhudson-jaxb-ri-2.2-147
// See <a href="client://java.sun.com/xml/jaxb">client://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2012.01.13 at 08:24:23 PM WET
//

package io.gdcc.xoai.model.oaipmh.results;

import io.gdcc.xoai.model.oaipmh.results.record.About;
import io.gdcc.xoai.model.oaipmh.results.record.Header;
import io.gdcc.xoai.model.oaipmh.results.record.Metadata;
import io.gdcc.xoai.xml.XmlWritable;
import io.gdcc.xoai.xml.XmlWriter;
import io.gdcc.xoai.xmlio.exceptions.XmlWriteException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.xml.stream.XMLStreamException;

public class Record implements XmlWritable {

    protected Header header = null;
    protected Metadata metadata = null;
    protected List<About> abouts = new ArrayList<>();

    public Header getHeader() {
        return header;
    }

    public Record withHeader(Header value) {
        this.header = value;
        return this;
    }

    public Metadata getMetadata() {
        return metadata;
    }

    public Record withMetadata(Metadata value) {
        this.metadata = value;
        return this;
    }

    public Record withAbout(About itemAbout) {
        this.abouts.add(itemAbout);
        return this;
    }

    public List<About> getAbouts() {
        return this.abouts;
    }

    @Override
    public void write(XmlWriter writer) throws XmlWriteException {
        try {
            if (this.header != null) {
                writer.writeStartElement("header");
                this.header.write(writer);
                writer.writeEndElement();
            }

            if (this.metadata != null) {
                writer.writeStartElement("metadata");

                /*
                 * When enabled via context, write attributes to the metadata element if present
                 * This is here for Dataverse 4/5 backward compatibility.
                 * @deprecated Remove when Dataverse 6 is old enough that no ones uses this workaround anymore.
                 */
                Optional<Map<String, String>> attributes = this.metadata.getAttributes();
                if (writer.getWriterContext().isMetadataAttributesEnabled()
                        && attributes.isPresent()) {
                    for (Map.Entry<String, String> entry : attributes.get().entrySet()) {
                        writer.writeAttribute(entry.getKey(), entry.getValue());
                    }
                }

                this.metadata.write(writer);
                writer.writeEndElement();
            }

            for (About about : getAbouts()) {
                writer.writeStartElement("about");
                about.write(writer);
                writer.writeEndElement();
            }

        } catch (XMLStreamException e) {
            throw new XmlWriteException(e);
        }
    }
}
